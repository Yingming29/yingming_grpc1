syntax = "proto3";
option java_multiple_files = true;
option java_package = "io.grpc.jchannelRpc";
option java_outer_classname = "JChannelRpc";
option objc_class_prefix = "YINGMING";
package cn.yingming.grpc1;

service JChannelsService{
  rpc connect(stream Request) returns (stream Response) {
  }
  rpc disconnect(DisconnectReq) returns (DisconnectRep){
  }
  rpc ask(ReqAsk) returns (RepAsk) {
  }
}
message Request{
  oneof oneType{
    MessageReq messageRequest = 1;
    ConnectReq connectRequest = 2;
    DisconnectReq disconnectRequest = 3;
  }
}
message Response{
  oneof oneType{
    MessageRep messageResponse = 1;
    ConnectRep connectResponse = 2;
    DisconnectRep disconnectResponse = 3;
    UpdateRep updateResponse = 4;
    ViewRep viewResponse = 5;
  }
}
message ViewRep{
  string creator = 1;
  int32 viewNum = 2;
  int32 size = 3;
  string jchannel_addresses = 4;
}
// update the available server list
message UpdateRep{
  string addresses = 1;
}
message MessageReq{
  string source = 1;  // uuid
  string jchannel_address = 2;  // the fake address of client jchannel, sender
  string cluster = 3;
  string content = 4;
  string timestamp = 5;
  string destination = 6;  // "" means the broadcast in this cluster, receivers
}
message MessageRep{
  string jchannel_address = 1; // sender
  string content = 2;
}
// used for the bidirectional streaming.
message ConnectReq {
  // the default value of string is empty, and that of boolean is false.
  string source = 1;  // uuid
  string jchannel_address = 2;   // name
  string cluster = 3;
  string timestamp = 4;
}

message ConnectRep {
  bool result = 1;
}

// disconnect()
message DisconnectReq{
  string source = 1;
  string jchannel_address = 2;
  string cluster = 3;
  string timestamp = 4;
}
message DisconnectRep{
  bool result = 1;
}
// The messages used for the try connection.
message ReqAsk {
  string source = 1;
}
message RepAsk{
  bool survival = 1;
}

